[plugin:vite:react-swc] × the name `React` is defined multiple times
    ╭─[/home/runner/workspace/src/components/ui/button.tsx:1:1]
  1 │ import * as React from "react"
    ·             ──┬──
    ·               ╰── previous definition of `React` here
  2 │ import { Slot } from "@radix-ui/react-slot"
  3 │ import { cva, type VariantProps } from "class-variance-authority"
  4 │ 
  5 │ import { cn } from "@/lib/utils"
  6 │ 
  7 │ const buttonVariants = cva(
  8 │   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  9 │   {
 10 │     variants: {
 11 │       variant: {
 12 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
 13 │         destructive:
 14 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
 15 │         outline:
 16 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
 17 │         secondary:
 18 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
 19 │         ghost: "hover:bg-accent hover:text-accent-foreground",
 20 │         link: "text-primary underline-offset-4 hover:underline",
 21 │       },
 22 │       size: {
 23 │         default: "h-10 px-4 py-2",
 24 │         sm: "h-9 rounded-md px-3",
 25 │         lg: "h-11 rounded-md px-8",
 26 │         icon: "h-10 w-10",
 27 │       },
 28 │     },
 29 │     defaultVariants: {
 30 │       variant: "default",
 31 │       size: "default",
 32 │     },
 33 │   }
 34 │ )
 35 │ 
 36 │ export interface ButtonProps
 37 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
 38 │     VariantProps<typeof buttonVariants> {
 39 │   asChild?: boolean
 40 │ }
 41 │ 
 42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
 43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 44 │     const Comp = asChild ? Slot : "button"
 45 │     return (
 46 │       <Comp
 47 │         className={cn(buttonVariants({ variant, size, className }))}
 48 │         ref={ref}
 49 │         {...props}
 50 │       />
 51 │     )
 52 │   }
 53 │ )
 54 │ Button.displayName = "Button"
 55 │ 
 56 │ export { Button, buttonVariants }
 57 │ import * as React from "react"
    ·             ──┬──
    ·               ╰── `React` redefined here
 58 │ import { Slot } from "@radix-ui/react-slot"
 59 │ import { cva, type VariantProps } from "class-variance-authority"
    ╰────
  × the name `Slot` is defined multiple times
    ╭─[/home/runner/workspace/src/components/ui/button.tsx:2:1]
  1 │ import * as React from "react"
  2 │ import { Slot } from "@radix-ui/react-slot"
    ·          ──┬─
    ·            ╰── previous definition of `Slot` here
  3 │ import { cva, type VariantProps } from "class-variance-authority"
  4 │ 
  5 │ import { cn } from "@/lib/utils"
  6 │ 
  7 │ const buttonVariants = cva(
  8 │   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  9 │   {
 10 │     variants: {
 11 │       variant: {
 12 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
 13 │         destructive:
 14 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
 15 │         outline:
 16 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
 17 │         secondary:
 18 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
 19 │         ghost: "hover:bg-accent hover:text-accent-foreground",
 20 │         link: "text-primary underline-offset-4 hover:underline",
 21 │       },
 22 │       size: {
 23 │         default: "h-10 px-4 py-2",
 24 │         sm: "h-9 rounded-md px-3",
 25 │         lg: "h-11 rounded-md px-8",
 26 │         icon: "h-10 w-10",
 27 │       },
 28 │     },
 29 │     defaultVariants: {
 30 │       variant: "default",
 31 │       size: "default",
 32 │     },
 33 │   }
 34 │ )
 35 │ 
 36 │ export interface ButtonProps
 37 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
 38 │     VariantProps<typeof buttonVariants> {
 39 │   asChild?: boolean
 40 │ }
 41 │ 
 42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
 43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 44 │     const Comp = asChild ? Slot : "button"
 45 │     return (
 46 │       <Comp
 47 │         className={cn(buttonVariants({ variant, size, className }))}
 48 │         ref={ref}
 49 │         {...props}
 50 │       />
 51 │     )
 52 │   }
 53 │ )
 54 │ Button.displayName = "Button"
 55 │ 
 56 │ export { Button, buttonVariants }
 57 │ import * as React from "react"
 58 │ import { Slot } from "@radix-ui/react-slot"
    ·          ──┬─
    ·            ╰── `Slot` redefined here
 59 │ import { cva, type VariantProps } from "class-variance-authority"
 60 │ 
 61 │ import { cn } from "@/lib/utils"
    ╰────
  × the name `cva` is defined multiple times
    ╭─[/home/runner/workspace/src/components/ui/button.tsx:3:1]
  1 │ import * as React from "react"
  2 │ import { Slot } from "@radix-ui/react-slot"
  3 │ import { cva, type VariantProps } from "class-variance-authority"
    ·          ─┬─
    ·           ╰── previous definition of `cva` here
  4 │ 
  5 │ import { cn } from "@/lib/utils"
  6 │ 
  7 │ const buttonVariants = cva(
  8 │   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  9 │   {
 10 │     variants: {
 11 │       variant: {
 12 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
 13 │         destructive:
 14 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
 15 │         outline:
 16 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
 17 │         secondary:
 18 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
 19 │         ghost: "hover:bg-accent hover:text-accent-foreground",
 20 │         link: "text-primary underline-offset-4 hover:underline",
 21 │       },
 22 │       size: {
 23 │         default: "h-10 px-4 py-2",
 24 │         sm: "h-9 rounded-md px-3",
 25 │         lg: "h-11 rounded-md px-8",
 26 │         icon: "h-10 w-10",
 27 │       },
 28 │     },
 29 │     defaultVariants: {
 30 │       variant: "default",
 31 │       size: "default",
 32 │     },
 33 │   }
 34 │ )
 35 │ 
 36 │ export interface ButtonProps
 37 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
 38 │     VariantProps<typeof buttonVariants> {
 39 │   asChild?: boolean
 40 │ }
 41 │ 
 42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
 43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 44 │     const Comp = asChild ? Slot : "button"
 45 │     return (
 46 │       <Comp
 47 │         className={cn(buttonVariants({ variant, size, className }))}
 48 │         ref={ref}
 49 │         {...props}
 50 │       />
 51 │     )
 52 │   }
 53 │ )
 54 │ Button.displayName = "Button"
 55 │ 
 56 │ export { Button, buttonVariants }
 57 │ import * as React from "react"
 58 │ import { Slot } from "@radix-ui/react-slot"
 59 │ import { cva, type VariantProps } from "class-variance-authority"
    ·          ─┬─
    ·           ╰── `cva` redefined here
 60 │ 
 61 │ import { cn } from "@/lib/utils"
    ╰────
  × the name `cn` is defined multiple times
    ╭─[/home/runner/workspace/src/components/ui/button.tsx:5:1]
  2 │ import { Slot } from "@radix-ui/react-slot"
  3 │ import { cva, type VariantProps } from "class-variance-authority"
  4 │ 
  5 │ import { cn } from "@/lib/utils"
    ·          ─┬
    ·           ╰── previous definition of `cn` here
  6 │ 
  7 │ const buttonVariants = cva(
  8 │   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  9 │   {
 10 │     variants: {
 11 │       variant: {
 12 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
 13 │         destructive:
 14 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
 15 │         outline:
 16 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
 17 │         secondary:
 18 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
 19 │         ghost: "hover:bg-accent hover:text-accent-foreground",
 20 │         link: "text-primary underline-offset-4 hover:underline",
 21 │       },
 22 │       size: {
 23 │         default: "h-10 px-4 py-2",
 24 │         sm: "h-9 rounded-md px-3",
 25 │         lg: "h-11 rounded-md px-8",
 26 │         icon: "h-10 w-10",
 27 │       },
 28 │     },
 29 │     defaultVariants: {
 30 │       variant: "default",
 31 │       size: "default",
 32 │     },
 33 │   }
 34 │ )
 35 │ 
 36 │ export interface ButtonProps
 37 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
 38 │     VariantProps<typeof buttonVariants> {
 39 │   asChild?: boolean
 40 │ }
 41 │ 
 42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
 43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 44 │     const Comp = asChild ? Slot : "button"
 45 │     return (
 46 │       <Comp
 47 │         className={cn(buttonVariants({ variant, size, className }))}
 48 │         ref={ref}
 49 │         {...props}
 50 │       />
 51 │     )
 52 │   }
 53 │ )
 54 │ Button.displayName = "Button"
 55 │ 
 56 │ export { Button, buttonVariants }
 57 │ import * as React from "react"
 58 │ import { Slot } from "@radix-ui/react-slot"
 59 │ import { cva, type VariantProps } from "class-variance-authority"
 60 │ 
 61 │ import { cn } from "@/lib/utils"
    ·          ─┬
    ·           ╰── `cn` redefined here
 62 │ 
 63 │ const buttonVariants = cva(
 64 │   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    ╰────
  × the name `buttonVariants` is defined multiple times
    ╭─[/home/runner/workspace/src/components/ui/button.tsx:7:1]
  4 │ 
  5 │ import { cn } from "@/lib/utils"
  6 │ 
  7 │ const buttonVariants = cva(
    ·       ───────┬──────
    ·              ╰── previous definition of `buttonVariants` here
  8 │   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  9 │   {
 10 │     variants: {
 11 │       variant: {
 12 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
 13 │         destructive:
 14 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
 15 │         outline:
 16 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
 17 │         secondary:
 18 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
 19 │         ghost: "hover:bg-accent hover:text-accent-foreground",
 20 │         link: "text-primary underline-offset-4 hover:underline",
 21 │       },
 22 │       size: {
 23 │         default: "h-10 px-4 py-2",
 24 │         sm: "h-9 rounded-md px-3",
 25 │         lg: "h-11 rounded-md px-8",
 26 │         icon: "h-10 w-10",
 27 │       },
 28 │     },
 29 │     defaultVariants: {
 30 │       variant: "default",
 31 │       size: "default",
 32 │     },
 33 │   }
 34 │ )
 35 │ 
 36 │ export interface ButtonProps
 37 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
 38 │     VariantProps<typeof buttonVariants> {
 39 │   asChild?: boolean
 40 │ }
 41 │ 
 42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
 43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 44 │     const Comp = asChild ? Slot : "button"
 45 │     return (
 46 │       <Comp
 47 │         className={cn(buttonVariants({ variant, size, className }))}
 48 │         ref={ref}
 49 │         {...props}
 50 │       />
 51 │     )
 52 │   }
 53 │ )
 54 │ Button.displayName = "Button"
 55 │ 
 56 │ export { Button, buttonVariants }
 57 │ import * as React from "react"
 58 │ import { Slot } from "@radix-ui/react-slot"
 59 │ import { cva, type VariantProps } from "class-variance-authority"
 60 │ 
 61 │ import { cn } from "@/lib/utils"
 62 │ 
 63 │ const buttonVariants = cva(
    ·       ───────┬──────
    ·              ╰── `buttonVariants` redefined here
 64 │   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
 65 │   {
 66 │     variants: {
    ╰────
  × the name `Button` is defined multiple times
     ╭─[/home/runner/workspace/src/components/ui/button.tsx:42:1]
  39 │   asChild?: boolean
  40 │ }
  41 │ 
  42 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
     ·       ───┬──
     ·          ╰── previous definition of `Button` here
  43 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
  44 │     const Comp = asChild ? Slot : "button"
  45 │     return (
  46 │       <Comp
  47 │         className={cn(buttonVariants({ variant, size, className }))}
  48 │         ref={ref}
  49 │         {...props}
  50 │       />
  51 │     )
  52 │   }
  53 │ )
  54 │ Button.displayName = "Button"
  55 │ 
  56 │ export { Button, buttonVariants }
  57 │ import * as React from "react"
  58 │ import { Slot } from "@radix-ui/react-slot"
  59 │ import { cva, type VariantProps } from "class-variance-authority"
  60 │ 
  61 │ import { cn } from "@/lib/utils"
  62 │ 
  63 │ const buttonVariants = cva(
  64 │   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  65 │   {
  66 │     variants: {
  67 │       variant: {
  68 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
  69 │         destructive:
  70 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  71 │         outline:
  72 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  73 │         secondary:
  74 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  75 │         ghost: "hover:bg-accent hover:text-accent-foreground",
  76 │         link: "text-primary underline-offset-4 hover:underline",
  77 │       },
  78 │       size: {
  79 │         default: "h-10 px-4 py-2",
  80 │         sm: "h-9 rounded-md px-3",
  81 │         lg: "h-11 rounded-md px-8",
  82 │         icon: "h-10 w-10",
  83 │       },
  84 │     },
  85 │     defaultVariants: {
  86 │       variant: "default",
  87 │       size: "default",
  88 │     },
  89 │   }
  90 │ )
  91 │ 
  92 │ export interface ButtonProps
  93 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  94 │     VariantProps<typeof buttonVariants> {
  95 │   asChild?: boolean
  96 │ }
  97 │ 
  98 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
     ·       ───┬──
     ·          ╰── `Button` redefined here
  99 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 100 │     const Comp = asChild ? Slot : "button"
 101 │     return (
     ╰────
  × the name `Button` is exported multiple times
     ╭─[/home/runner/workspace/src/components/ui/button.tsx:56:1]
  53 │ )
  54 │ Button.displayName = "Button"
  55 │ 
  56 │ export { Button, buttonVariants }
     ·          ───┬──
     ·             ╰── previous exported here
  57 │ import * as React from "react"
  58 │ import { Slot } from "@radix-ui/react-slot"
  59 │ import { cva, type VariantProps } from "class-variance-authority"
  60 │ 
  61 │ import { cn } from "@/lib/utils"
  62 │ 
  63 │ const buttonVariants = cva(
  64 │   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  65 │   {
  66 │     variants: {
  67 │       variant: {
  68 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
  69 │         destructive:
  70 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  71 │         outline:
  72 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  73 │         secondary:
  74 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  75 │         ghost: "hover:bg-accent hover:text-accent-foreground",
  76 │         link: "text-primary underline-offset-4 hover:underline",
  77 │       },
  78 │       size: {
  79 │         default: "h-10 px-4 py-2",
  80 │         sm: "h-9 rounded-md px-3",
  81 │         lg: "h-11 rounded-md px-8",
  82 │         icon: "h-10 w-10",
  83 │       },
  84 │     },
  85 │     defaultVariants: {
  86 │       variant: "default",
  87 │       size: "default",
  88 │     },
  89 │   }
  90 │ )
  91 │ 
  92 │ export interface ButtonProps
  93 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  94 │     VariantProps<typeof buttonVariants> {
  95 │   asChild?: boolean
  96 │ }
  97 │ 
  98 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  99 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 100 │     const Comp = asChild ? Slot : "button"
 101 │     return (
 102 │       <Comp
 103 │         className={cn(buttonVariants({ variant, size, className }))}
 104 │         ref={ref}
 105 │         {...props}
 106 │       />
 107 │     )
 108 │   }
 109 │ )
 110 │ Button.displayName = "Button"
 111 │ 
 112 │ export { Button, buttonVariants }
     ·          ───┬──
     ·             ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
  × the name `buttonVariants` is exported multiple times
     ╭─[/home/runner/workspace/src/components/ui/button.tsx:56:1]
  53 │ )
  54 │ Button.displayName = "Button"
  55 │ 
  56 │ export { Button, buttonVariants }
     ·                  ───────┬──────
     ·                         ╰── previous exported here
  57 │ import * as React from "react"
  58 │ import { Slot } from "@radix-ui/react-slot"
  59 │ import { cva, type VariantProps } from "class-variance-authority"
  60 │ 
  61 │ import { cn } from "@/lib/utils"
  62 │ 
  63 │ const buttonVariants = cva(
  64 │   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  65 │   {
  66 │     variants: {
  67 │       variant: {
  68 │         default: "bg-primary text-primary-foreground hover:bg-primary/90",
  69 │         destructive:
  70 │           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  71 │         outline:
  72 │           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  73 │         secondary:
  74 │           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  75 │         ghost: "hover:bg-accent hover:text-accent-foreground",
  76 │         link: "text-primary underline-offset-4 hover:underline",
  77 │       },
  78 │       size: {
  79 │         default: "h-10 px-4 py-2",
  80 │         sm: "h-9 rounded-md px-3",
  81 │         lg: "h-11 rounded-md px-8",
  82 │         icon: "h-10 w-10",
  83 │       },
  84 │     },
  85 │     defaultVariants: {
  86 │       variant: "default",
  87 │       size: "default",
  88 │     },
  89 │   }
  90 │ )
  91 │ 
  92 │ export interface ButtonProps
  93 │   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  94 │     VariantProps<typeof buttonVariants> {
  95 │   asChild?: boolean
  96 │ }
  97 │ 
  98 │ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  99 │   ({ className, variant, size, asChild = false, ...props }, ref) => {
 100 │     const Comp = asChild ? Slot : "button"
 101 │     return (
 102 │       <Comp
 103 │         className={cn(buttonVariants({ variant, size, className }))}
 104 │         ref={ref}
 105 │         {...props}
 106 │       />
 107 │     )
 108 │   }
 109 │ )
 110 │ Button.displayName = "Button"
 111 │ 
 112 │ export { Button, buttonVariants }
     ·                  ───────┬──────
     ·                         ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/components/ui/button.tsx:1:1
1  |  import * as React from "react"
   |   ^
2  |  import { Slot } from "@radix-ui/react-slot"
3  |  import { cva, type VariantProps } from "class-variance-authority"
Click outside, press Esc key, or fix the code to dismiss.
You can also disable this overlay by setting server.hmr.overlay to false in vite.config.ts.